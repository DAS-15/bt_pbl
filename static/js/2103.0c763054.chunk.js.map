{"version":3,"file":"static/js/2103.0c763054.chunk.js","mappings":"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","sources":["../node_modules/@thirdweb-dev/wallets/dist/normalizeChainId-e4cc0175.browser.esm.js","../node_modules/@thirdweb-dev/wallets/evm/connectors/paper/dist/thirdweb-dev-wallets-evm-connectors-paper.browser.esm.js","../node_modules/@paperxyz/embedded-wallet-service-sdk/src/interfaces/Auth.ts","../node_modules/@paperxyz/sdk-common-utilities/src/constants/blockchain.ts","../node_modules/@paperxyz/sdk-common-utilities/src/constants/settings.ts","../node_modules/@paperxyz/embedded-wallet-service-sdk/src/constants/settings.ts","../node_modules/@paperxyz/embedded-wallet-service-sdk/src/interfaces/EmbeddedWallets/EmbeddedWallets.ts","../node_modules/@paperxyz/embedded-wallet-service-sdk/src/utils/Storage/LocalStorage.ts","../node_modules/@paperxyz/embedded-wallet-service-sdk/src/utils/iFrameCommunication/IframeCommunicator.ts","../node_modules/@paperxyz/embedded-wallet-service-sdk/src/utils/iFrameCommunication/EmbeddedWalletIframeCommunicator.ts","../node_modules/@paperxyz/embedded-wallet-service-sdk/src/lib/Auth.ts","../node_modules/@paperxyz/embedded-wallet-service-sdk/src/lib/EmbeddedWallets/GaslessTransactionMaker.ts","../node_modules/@paperxyz/embedded-wallet-service-sdk/src/lib/EmbeddedWallets/Signer.ts","../node_modules/@paperxyz/embedded-wallet-service-sdk/src/lib/EmbeddedWallets/EmbeddedWallet.ts","../node_modules/@paperxyz/embedded-wallet-service-sdk/src/lib/Paper.ts"],"sourcesContent":["function normalizeChainId(chainId) {\n  if (typeof chainId === \"string\") {\n    return Number.parseInt(chainId, chainId.trim().substring(0, 2) === \"0x\" ? 16 : 10);\n  }\n  if (typeof chainId === \"bigint\") {\n    return Number(chainId);\n  }\n  return chainId;\n}\n\nexport { normalizeChainId as n };\n","import { _ as _classPrivateFieldInitSpec, b as _classPrivateFieldGet, a as _classPrivateFieldSet } from '../../../../dist/classPrivateFieldSet-eea39a9a.browser.esm.js';\nimport { _ as _defineProperty } from '../../../../dist/defineProperty-c8ecdc07.browser.esm.js';\nimport { T as TWConnector } from '../../../../dist/tw-connector-443c384d.browser.esm.js';\nimport { UserStatus } from '@paperxyz/embedded-wallet-service-sdk';\nimport { utils } from 'ethers';\nimport { n as normalizeChainId } from '../../../../dist/normalizeChainId-e4cc0175.browser.esm.js';\nimport '../../../../dist/checkPrivateRedeclaration-3aaaa21d.browser.esm.js';\nimport 'eventemitter3';\n\nconst PaperChainMap = {\n  1: \"Ethereum\",\n  5: \"Goerli\",\n  137: \"Polygon\",\n  80001: \"Mumbai\",\n  43114: \"Avalanche\"\n};\nvar _paper = /*#__PURE__*/new WeakMap();\nvar _signer = /*#__PURE__*/new WeakMap();\nclass PaperWalletConnector extends TWConnector {\n  constructor(options) {\n    super();\n    _defineProperty(this, \"id\", \"paper-wallet\");\n    _defineProperty(this, \"name\", \"Paper Wallet\");\n    _defineProperty(this, \"ready\", true);\n    _defineProperty(this, \"user\", null);\n    _classPrivateFieldInitSpec(this, _paper, {\n      writable: true,\n      value: void 0\n    });\n    _defineProperty(this, \"options\", void 0);\n    _classPrivateFieldInitSpec(this, _signer, {\n      writable: true,\n      value: void 0\n    });\n    _defineProperty(this, \"onAccountsChanged\", async accounts => {\n      if (accounts.length === 0) {\n        await this.onDisconnect();\n      } else {\n        this.emit(\"change\", {\n          account: utils.getAddress(accounts[0])\n        });\n      }\n    });\n    _defineProperty(this, \"onChainChanged\", chainId => {\n      const id = normalizeChainId(chainId);\n      const unsupported = this.isChainUnsupported(id);\n      this.emit(\"change\", {\n        chain: {\n          id,\n          unsupported\n        }\n      });\n    });\n    _defineProperty(this, \"onDisconnect\", async () => {\n      this.emit(\"disconnect\");\n    });\n    this.options = options;\n  }\n  getPaperSDK() {\n    if (!_classPrivateFieldGet(this, _paper)) {\n      _classPrivateFieldSet(this, _paper, new Promise(async (resolve, reject) => {\n        try {\n          if (!(this.options.chain.chainId in PaperChainMap)) {\n            throw new Error(\"Unsupported chain id: \" + this.options.chain.chainId);\n          }\n          const {\n            PaperEmbeddedWalletSdk\n          } = await import('@paperxyz/embedded-wallet-service-sdk');\n          const chainName = PaperChainMap[this.options.chain.chainId];\n          resolve(new PaperEmbeddedWalletSdk({\n            clientId: this.options.clientId,\n            chain: chainName\n          }));\n        } catch (err) {\n          reject(err);\n        }\n      }));\n    }\n    return _classPrivateFieldGet(this, _paper);\n  }\n  async connect() {\n    const paperSDK = await this.getPaperSDK();\n    if (!paperSDK) {\n      throw new Error(\"Paper SDK not initialized\");\n    }\n    let user = await paperSDK.getUser();\n    switch (user.status) {\n      case UserStatus.LOGGED_OUT:\n        {\n          const authResult = await paperSDK.auth.loginWithPaperModal();\n          this.user = authResult.user;\n          break;\n        }\n      case UserStatus.LOGGED_IN_WALLET_INITIALIZED:\n        {\n          this.user = user;\n          break;\n        }\n    }\n    if (!this.user) {\n      throw new Error(\"Error connecting User\");\n    }\n    this.setupListeners();\n    return this.getAddress();\n  }\n  async disconnect() {\n    // await this.paper?.auth.logout();\n    this.user = null;\n  }\n  async getAddress() {\n    const signer = await this.getSigner();\n    return signer.getAddress();\n  }\n  async isConnected() {\n    try {\n      const addr = await this.getAddress();\n      return !!addr;\n    } catch (e) {\n      return false;\n    }\n  }\n  async getProvider() {\n    const signer = await this.getSigner();\n    if (!signer.provider) {\n      throw new Error(\"Provider not found\");\n    }\n    return signer.provider;\n  }\n  async getSigner() {\n    if (_classPrivateFieldGet(this, _signer)) {\n      return _classPrivateFieldGet(this, _signer);\n    }\n    if (!this.user) {\n      const paperSDK = await this.getPaperSDK();\n      let user = await paperSDK.getUser();\n      switch (user.status) {\n        case UserStatus.LOGGED_IN_WALLET_INITIALIZED:\n          {\n            this.user = user;\n            break;\n          }\n      }\n    }\n    const signer = await this.user?.wallet.getEthersJsSigner({\n      rpcEndpoint: this.options.chain.rpc[0]\n    });\n    if (!signer) {\n      throw new Error(\"Signer not found\");\n    }\n    _classPrivateFieldSet(this, _signer, signer);\n    return signer;\n  }\n  async isAuthorized() {\n    return false;\n  }\n  async switchChain(chainId) {\n    // check if chainId is supported or not\n    if (!(chainId in PaperChainMap)) {\n      throw new Error(\"Chain not supported\");\n    }\n    const chainName = PaperChainMap[chainId];\n    const chain = this.options.chains.find(c => c.chainId === chainId);\n    if (!chain) {\n      throw new Error(\"Chain not configured\");\n    }\n\n    // update chain in wallet\n    await this.user?.wallet.setChain({\n      chain: chainName\n    });\n\n    // update signer\n    _classPrivateFieldSet(this, _signer, await this.user?.wallet.getEthersJsSigner({\n      rpcEndpoint: chain.rpc[0]\n    }));\n    this.emit(\"change\", {\n      chain: {\n        id: chainId,\n        unsupported: false\n      }\n    });\n  }\n\n  // private getUser() {\n  //   if (!this.user) {\n  //     throw new Error(\"User not found\");\n  //   }\n  //   return this.user;\n  // }\n\n  async setupListeners() {\n    const provider = await this.getProvider();\n    if (provider.on) {\n      provider.on(\"accountsChanged\", this.onAccountsChanged);\n      provider.on(\"chainChanged\", this.onChainChanged);\n      provider.on(\"disconnect\", this.onDisconnect);\n    }\n  }\n  updateChains(chains) {\n    this.options.chains = chains;\n  }\n  isChainUnsupported(chainId) {\n    return !(chainId in PaperChainMap);\n  }\n  async getEmail() {\n    await this.getProvider();\n    if (!this.user) {\n      throw new Error(\"No user found, Paper Wallet is not connected\");\n    }\n    return this.user.authDetails.email;\n  }\n}\n\nexport { PaperChainMap, PaperWalletConnector };\n","import type {\n  AuthDetails,\n  InitializedUser,\n  SetUpWalletRpcReturnType,\n} from \"./EmbeddedWallets/EmbeddedWallets\";\n\nexport enum AuthProvider {\n  PAPER_EMAIL_OTP = \"PaperEmailOTP\",\n  GOOGLE = \"Google\",\n  AUTH0 = \"Auth0\",\n  CUSTOM_JWT = \"CustomJWT\",\n}\n\nexport type GetSocialLoginClientIdReturnType = {\n  clientId: string;\n};\n\n// TODO: Clean up tech debt of random type Objects\n// E.g. StoredTokenType is really not used anywhere but it exists as this object for legacy reason\nexport type StoredTokenType = {\n  jwtToken: string;\n  authProvider: AuthProvider;\n  authDetails: AuthDetails;\n  developerClientId: string;\n};\n\nexport type AuthStoredTokenWithCookieReturnType = {\n  storedToken: StoredTokenType & {\n    cookieString: string;\n    shouldStoreCookieString: boolean;\n    isNewUser: boolean;\n  };\n};\nexport type AuthAndWalletRpcReturnType = AuthStoredTokenWithCookieReturnType & {\n  walletDetails: SetUpWalletRpcReturnType;\n};\n\nexport type AuthLoginReturnType = { user: InitializedUser };\n","export const ChainToPublicRpc: Record<Chain, string> = {\n  Ethereum: \"https://rpc.ankr.com/eth\",\n  Goerli: \"https://goerli.infura.io/v3/9aa3d95b3bc440fa88ea12eaa4456161\",\n  Mumbai: \"https://rpc-mumbai.maticvigil.com\",\n  Polygon: \"https://rpc-mainnet.maticvigil.com\",\n  Avalanche: \"https://api.avax.network/ext/bc/C/rpc\",\n};\n\n// General Embedded wallet types\nexport type Chain = \"Polygon\" | \"Mumbai\" | \"Goerli\" | \"Ethereum\" | \"Avalanche\";\n\nexport type SupportedChainName = Chain | \"Rinkeby\" | \"Solana\" | \"SolanaDevnet\";\n","const isDev = (): boolean => {\n  return !!(\n    typeof window !== \"undefined\" &&\n    window.localStorage.getItem(\"IS_PAPER_DEV\") === \"true\"\n  );\n};\n\nconst isOldPaperDomain = (): boolean =>\n  typeof window !== \"undefined\" && window.location.origin.includes(\"paper.xyz\");\n\nexport const getPaperOriginUrl = (): string => {\n  if (isDev())\n    return (\n      window.localStorage.getItem(\"PAPER_DEV_URL\") ?? \"http://localhost:3000\"\n    );\n\n  if (isOldPaperDomain()) return window.location.origin;\n\n  return \"https://withpaper.com\";\n};\n","export const EMBEDDED_WALLET_PATH = \"/sdk/2022-08-12/embedded-wallet\";\n\nexport const WALLET_USER_ID_LOCAL_STORAGE_NAME = (clientId: string) =>\n  `paperEwsWalletUserId-${clientId}`;\nconst AUTH_TOKEN_LOCAL_STORAGE_PREFIX = \"walletToken\";\nexport const AUTH_TOKEN_LOCAL_STORAGE_NAME = (clientId: string) => {\n  return `${AUTH_TOKEN_LOCAL_STORAGE_PREFIX}-${clientId}`;\n};\nconst DEVICE_SHARE_LOCAL_STORAGE_PREFIX = \"a\";\nexport const DEVICE_SHARE_LOCAL_STORAGE_NAME = (\n  clientId: string,\n  userId: string,\n) => `${DEVICE_SHARE_LOCAL_STORAGE_PREFIX}-${clientId}-${userId}`;\nexport const DEVICE_SHARE_LOCAL_STORAGE_NAME_DEPRECATED = (clientId: string) =>\n  `${DEVICE_SHARE_LOCAL_STORAGE_PREFIX}-${clientId}`;\n","import type {\n  Chain,\n  CustomizationOptionsType,\n} from \"@paperxyz/sdk-common-utilities\";\nimport type { EmbeddedWallet } from \"../../lib/EmbeddedWallets/EmbeddedWallet\";\nimport type { EmbeddedWalletIframeCommunicator } from \"../../utils/iFrameCommunication/EmbeddedWalletIframeCommunicator\";\n\n// Class constructor types\n// types for class constructors still a little messy right now.\n// Open to PRs from whoever sees this and knows of a cleaner way to handle things\nexport type ClientIdConstructorType = { clientId: string };\nexport type PaperConstructorType = ClientIdConstructorType & {\n  chain: Chain;\n  styles?: CustomizationOptionsType;\n};\nexport type ClientIdWithQuerierType = ClientIdConstructorType & {\n  querier: EmbeddedWalletIframeCommunicator<any>;\n};\nexport type ClientIdWithQuerierAndChainType = ClientIdWithQuerierType & {\n  chain: Chain;\n};\n\n// Auth Types\nexport type AuthDetails = { email: string; userWalletId: string };\n\nexport type InitializedUser = {\n  status: UserStatus.LOGGED_IN_WALLET_INITIALIZED;\n  wallet: EmbeddedWallet;\n  walletAddress: string;\n  authDetails: AuthDetails;\n};\n\n// Embedded Wallet Types\nexport enum UserStatus {\n  LOGGED_OUT = \"Logged Out\",\n  LOGGED_IN_WALLET_INITIALIZED = \"Logged In, Wallet Initialized\",\n}\nexport enum UserWalletStatus {\n  LOGGED_OUT = \"Logged Out\",\n  LOGGED_IN_WALLET_UNINITIALIZED = \"Logged In, Wallet Uninitialized\",\n  LOGGED_IN_NEW_DEVICE = \"Logged In, New Device\",\n  LOGGED_IN_WALLET_INITIALIZED = \"Logged In, Wallet Initialized\",\n}\n\nexport type WalletAddressObjectType = {\n  walletAddress: string;\n};\nexport type SetUpWalletReturnType = WalletAddressObjectType & {\n  initialUserStatus: UserWalletStatus;\n};\nexport type SetUpWalletRpcReturnType = WalletAddressObjectType & {\n  deviceShareStored: string;\n  isIframeStorageEnabled: boolean;\n};\n\nexport type SendEmailOtpReturnType = {\n  isNewUser: boolean;\n  isNewDevice: boolean;\n};\nexport type LogoutReturnType = { success: boolean };\nexport type GetAuthDetailsReturnType = { authDetails?: AuthDetails };\n\n// ! Types seem repetitive, but the name should identify which goes where\n// this is the return type from the EmbeddedWallet Class getUserWalletStatus method iframe call\nexport type GetUserWalletStatusRpcReturnType =\n  | {\n      status: UserWalletStatus.LOGGED_OUT;\n      user: undefined;\n    }\n  | {\n      status: UserWalletStatus.LOGGED_IN_WALLET_UNINITIALIZED;\n      user: { authDetails: AuthDetails };\n    }\n  | {\n      status: UserWalletStatus.LOGGED_IN_NEW_DEVICE;\n      user: { authDetails: AuthDetails; walletAddress: string };\n    }\n  | {\n      status: UserWalletStatus.LOGGED_IN_WALLET_INITIALIZED;\n      user: Omit<InitializedUser, \"wallet\" | \"status\">;\n    };\n\n// this is the return type from the EmbeddedWallet Class getUserWalletStatus method\nexport type GetUserWalletStatusFnReturnType =\n  | {\n      status: UserWalletStatus.LOGGED_OUT;\n      user: undefined;\n    }\n  | {\n      status: UserWalletStatus.LOGGED_IN_WALLET_UNINITIALIZED;\n      user: { authDetails: AuthDetails };\n    }\n  | {\n      status: UserWalletStatus.LOGGED_IN_NEW_DEVICE;\n      user: { authDetails: AuthDetails; walletAddress: string };\n    }\n  | {\n      status: UserWalletStatus.LOGGED_IN_WALLET_INITIALIZED;\n      user: Omit<InitializedUser, \"status\">;\n    };\n\n// This is returned from the getUser method in PaperEmbeddedWalletSdk\nexport type GetUser =\n  | {\n      status: UserStatus.LOGGED_OUT;\n    }\n  | InitializedUser;\n","import {\n  AUTH_TOKEN_LOCAL_STORAGE_NAME,\n  DEVICE_SHARE_LOCAL_STORAGE_NAME,\n  WALLET_USER_ID_LOCAL_STORAGE_NAME,\n} from \"../../constants/settings\";\n\nconst data = new Map<string, string>();\n\nexport class LocalStorage {\n  protected isSupported: boolean;\n  protected clientId: string;\n  constructor({ clientId }: { clientId: string }) {\n    this.isSupported = typeof window !== \"undefined\" && !!window.localStorage;\n    this.clientId = clientId;\n  }\n\n  protected async getItem(key: string): Promise<string | null> {\n    if (this.isSupported) {\n      return window.localStorage.getItem(key);\n    } else {\n      return data.get(key) ?? null;\n    }\n  }\n\n  protected async setItem(key: string, value: string): Promise<void> {\n    if (this.isSupported) {\n      return window.localStorage.setItem(key, value);\n    } else {\n      data.set(key, value);\n    }\n  }\n\n  protected async removeItem(key: string): Promise<boolean> {\n    const item = await this.getItem(key);\n    if (this.isSupported && item) {\n      window.localStorage.removeItem(key);\n      return true;\n    }\n    return false;\n  }\n\n  async saveAuthCookie(cookie: string): Promise<void> {\n    await this.setItem(AUTH_TOKEN_LOCAL_STORAGE_NAME(this.clientId), cookie);\n  }\n  async getAuthCookie(): Promise<string | null> {\n    return this.getItem(AUTH_TOKEN_LOCAL_STORAGE_NAME(this.clientId));\n  }\n  async removeAuthCookie(): Promise<boolean> {\n    return this.removeItem(AUTH_TOKEN_LOCAL_STORAGE_NAME(this.clientId));\n  }\n\n  async saveDeviceShare(share: string, userId: string): Promise<void> {\n    await this.saveWalletUserId(userId);\n    await this.setItem(\n      DEVICE_SHARE_LOCAL_STORAGE_NAME(this.clientId, userId),\n      share,\n    );\n  }\n  async getDeviceShare(): Promise<string | null> {\n    const userId = await this.getWalletUserId();\n    if (userId) {\n      return this.getItem(\n        DEVICE_SHARE_LOCAL_STORAGE_NAME(this.clientId, userId),\n      );\n    }\n    return null;\n  }\n  async removeDeviceShare(): Promise<boolean> {\n    const userId = await this.getWalletUserId();\n    if (userId) {\n      return this.removeItem(\n        DEVICE_SHARE_LOCAL_STORAGE_NAME(this.clientId, userId),\n      );\n    }\n    return false;\n  }\n\n  async getWalletUserId(): Promise<string | null> {\n    return this.getItem(WALLET_USER_ID_LOCAL_STORAGE_NAME(this.clientId));\n  }\n  async saveWalletUserId(userId: string): Promise<void> {\n    await this.setItem(\n      WALLET_USER_ID_LOCAL_STORAGE_NAME(this.clientId),\n      userId,\n    );\n  }\n  async removeWalletUserId(): Promise<boolean> {\n    return this.removeItem(WALLET_USER_ID_LOCAL_STORAGE_NAME(this.clientId));\n  }\n}\n","import type { MessageType, StyleObject } from \"@paperxyz/sdk-common-utilities\";\nimport { getPaperOriginUrl } from \"@paperxyz/sdk-common-utilities\";\nimport { EMBEDDED_WALLET_PATH } from \"../../constants/settings\";\n\ntype IFrameCommunicatorProps = {\n  link: string;\n  iframeId: string;\n  container?: HTMLElement;\n  iframeStyles?: StyleObject;\n  onIframeInitialize?: () => void;\n};\n\nfunction sleep(seconds: number) {\n  return new Promise((resolve) => {\n    setTimeout(resolve, seconds * 1000);\n  });\n}\n\nconst iframeBaseStyle = {\n  height: \"100%\",\n  width: \"100%\",\n  border: \"none\",\n  backgroundColor: \"transparent\",\n  position: \"fixed\",\n  top: \"0px\",\n  right: \"0px\",\n  zIndex: \"2147483646\",\n  display: \"none\",\n};\n\n// Global var to help track iframe state\nconst isIframeLoaded = new Map<string, boolean>();\n\nexport class IframeCommunicator<T extends { [key: string]: any }> {\n  private iframe: HTMLIFrameElement;\n  private POLLING_INTERVAL_SECONDS = 1.4;\n  private POST_LOAD_BUFFER_SECONDS = 1;\n\n  constructor({\n    link,\n    iframeId,\n    container = document.body,\n    iframeStyles,\n    onIframeInitialize,\n  }: IFrameCommunicatorProps) {\n    // Creating the IFrame element for communication\n    let iframe = document.getElementById(iframeId) as HTMLIFrameElement | null;\n    const hrefLink = new URL(link);\n    const sdkVersion = process.env.SDK_VERSION;\n    if (!sdkVersion) {\n      throw new Error(\"Missing SDK_VERSION env var\");\n    }\n    hrefLink.searchParams.set(\"sdkVersion\", sdkVersion);\n    if (!iframe || iframe.src != hrefLink.href) {\n      // ! Do not update the hrefLink here or it'll cause multiple re-renders\n      if (!iframe) {\n        iframe = document.createElement(\"iframe\");\n        const mergedIframeStyles = {\n          ...iframeBaseStyle,\n          ...iframeStyles,\n        };\n        Object.assign(iframe.style, mergedIframeStyles);\n        iframe.setAttribute(\"id\", iframeId);\n        container.appendChild(iframe);\n      }\n      iframe.src = hrefLink.href;\n      iframe.setAttribute(\"data-version\", sdkVersion);\n      iframe.onload = this.onIframeLoadHandler(\n        iframe,\n        this.POST_LOAD_BUFFER_SECONDS,\n        onIframeInitialize,\n      );\n    }\n    this.iframe = iframe;\n  }\n\n  protected async onIframeLoadedInitVariables(): Promise<Record<string, any>> {\n    return {};\n  }\n\n  onIframeLoadHandler(\n    iframe: HTMLIFrameElement,\n    prePostMessageSleepInSeconds: number,\n    onIframeInitialize?: () => void,\n  ) {\n    return async () => {\n      const promise = new Promise<boolean>(async (res, rej) => {\n        const channel = new MessageChannel();\n        channel.port1.onmessage = (event: MessageEvent<MessageType<void>>) => {\n          const { data } = event;\n          channel.port1.close();\n          if (!data.success) {\n            return rej(data.error);\n          }\n          isIframeLoaded.set(iframe.src, true);\n          if (onIframeInitialize) {\n            onIframeInitialize();\n          }\n          return res(true);\n        };\n        // iFrame takes a bit of time after loading to be ready for message receiving\n        // This is hacky\n        await sleep(prePostMessageSleepInSeconds);\n        const INIT_IFRAME_EVENT = \"initIframe\";\n        iframe?.contentWindow?.postMessage(\n          // ? We initialise the iframe with a bunch\n          // of useful information so that we don't have to pass it\n          // through in each of the future call. This would be where we do it.\n          {\n            eventType: INIT_IFRAME_EVENT,\n            data: await this.onIframeLoadedInitVariables(),\n          },\n          `${getPaperOriginUrl()}${EMBEDDED_WALLET_PATH}`,\n          [channel.port2],\n        );\n      });\n      await promise;\n    };\n  }\n\n  async call<ReturnData>({\n    procedureName,\n    params,\n    showIframe = false,\n  }: {\n    procedureName: keyof T;\n    params: T[keyof T];\n    showIframe?: boolean;\n  }) {\n    while (!isIframeLoaded.get(this.iframe.src)) {\n      await sleep(this.POLLING_INTERVAL_SECONDS);\n    }\n    if (showIframe) {\n      this.iframe.style.display = \"block\";\n      // magic number to let the display render before performing the animation of the modal in\n      await sleep(0.005);\n    }\n    const promise = new Promise<ReturnData>((res, rej) => {\n      const channel = new MessageChannel();\n      channel.port1.onmessage = async (\n        event: MessageEvent<MessageType<ReturnData>>,\n      ) => {\n        const { data } = event;\n        channel.port1.close();\n        if (showIframe) {\n          // magic number to let modal fade out before hiding it\n          await sleep(0.1);\n          this.iframe.style.display = \"none\";\n        }\n        if (!data.success) {\n          rej(data.error);\n        } else {\n          res(data.data);\n        }\n      };\n      this.iframe.contentWindow?.postMessage(\n        { eventType: procedureName, data: params },\n        `${getPaperOriginUrl()}${EMBEDDED_WALLET_PATH}`,\n        [channel.port2],\n      );\n    });\n    return promise;\n  }\n\n  /**\n   * This has to be called by any iframe that will be removed from the DOM.\n   * Use to make sure that we reset the global loaded state of the particular iframe.src\n   */\n  destroy() {\n    isIframeLoaded.delete(this.iframe.src);\n  }\n}\n","import type { CustomizationOptionsType } from \"@paperxyz/sdk-common-utilities\";\nimport { getPaperOriginUrl } from \"@paperxyz/sdk-common-utilities\";\nimport { EMBEDDED_WALLET_PATH } from \"../../constants/settings\";\nimport { LocalStorage } from \"../Storage/LocalStorage\";\nimport { IframeCommunicator } from \"./IframeCommunicator\";\n\nexport class EmbeddedWalletIframeCommunicator<\n  T extends { [key: string]: any },\n> extends IframeCommunicator<T> {\n  clientId: string;\n  constructor({\n    clientId,\n    customizationOptions,\n  }: {\n    clientId: string;\n    customizationOptions?: CustomizationOptionsType;\n  }) {\n    super({\n      iframeId: EMBEDDED_WALLET_IFRAME_ID,\n      link: createEmbeddedWalletIframeLink({\n        clientId,\n        path: EMBEDDED_WALLET_PATH,\n        queryParams: customizationOptions,\n      }).href,\n      container: document.body,\n    });\n    this.clientId = clientId;\n  }\n\n  override async onIframeLoadedInitVariables() {\n    const localStorage = new LocalStorage({\n      clientId: this.clientId,\n    });\n\n    return {\n      authCookie: await localStorage.getAuthCookie(),\n      deviceShareStored: await localStorage.getDeviceShare(),\n      walletUserId: await localStorage.getWalletUserId(),\n      clientId: this.clientId,\n    };\n  }\n}\n\n// This is the URL and ID tag of the iFrame that we communicate with\nexport function createEmbeddedWalletIframeLink({\n  clientId,\n  path,\n  queryParams,\n}: {\n  clientId: string;\n  path: string;\n  queryParams?: { [key: string]: string | number };\n}) {\n  const embeddedWalletUrl = new URL(path, getPaperOriginUrl());\n  embeddedWalletUrl.searchParams.set(\"clientId\", clientId);\n  if (queryParams) {\n    for (const queryKey of Object.keys(queryParams)) {\n      embeddedWalletUrl.searchParams.set(\n        queryKey,\n        queryParams[queryKey]?.toString() || \"\",\n      );\n    }\n  }\n  return embeddedWalletUrl;\n}\nexport const EMBEDDED_WALLET_IFRAME_ID = \"paper-embedded-wallet-iframe\";\n","import type {\n  AuthAndWalletRpcReturnType,\n  AuthLoginReturnType,\n  AuthProvider,\n} from \"../interfaces/Auth\";\nimport type {\n  ClientIdWithQuerierType,\n  LogoutReturnType,\n  SendEmailOtpReturnType,\n} from \"../interfaces/EmbeddedWallets/EmbeddedWallets\";\nimport type { EmbeddedWalletIframeCommunicator } from \"../utils/iFrameCommunication/EmbeddedWalletIframeCommunicator\";\nimport { LocalStorage } from \"../utils/Storage/LocalStorage\";\n\nexport type AuthQuerierTypes = {\n  loginWithJwtAuthCallback: {\n    token: string;\n    authProvider: AuthProvider;\n    recoveryCode?: string;\n  };\n  loginWithPaperModal: void | { email: string };\n  logout: void;\n  sendPaperEmailLoginOtp: { email: string };\n  verifyPaperEmailLoginOtp: {\n    email: string;\n    otp: string;\n    recoveryCode?: string;\n  };\n};\n\nexport class Auth {\n  protected clientId: string;\n  protected AuthQuerier: EmbeddedWalletIframeCommunicator<AuthQuerierTypes>;\n  protected localStorage: LocalStorage;\n  protected onAuthSuccess: (\n    authResults: AuthAndWalletRpcReturnType,\n  ) => Promise<AuthLoginReturnType>;\n\n  /**\n   * Used to manage the user's auth states. This should not be instantiated directly.\n   * Call {@link PaperEmbeddedWalletSdk.auth} instead.\n   *\n   * Authentication settings can be managed via the [authentication settings dashboard](https://withpaper.com/dashboard/auth-settings)\n   * @param {string} params.clientId the clientId associated with the various authentication settings\n   */\n  constructor({\n    clientId,\n    querier,\n    onAuthSuccess,\n  }: ClientIdWithQuerierType & {\n    onAuthSuccess: (\n      authDetails: AuthAndWalletRpcReturnType,\n    ) => Promise<AuthLoginReturnType>;\n  }) {\n    this.clientId = clientId;\n    this.AuthQuerier = querier;\n    this.localStorage = new LocalStorage({ clientId });\n    this.onAuthSuccess = onAuthSuccess;\n  }\n\n  private async postLogin({\n    storedToken,\n    walletDetails,\n  }: AuthAndWalletRpcReturnType): Promise<AuthLoginReturnType> {\n    if (storedToken.shouldStoreCookieString) {\n      await this.localStorage.saveAuthCookie(storedToken.cookieString);\n    }\n    const initializedUser = await this.onAuthSuccess({\n      storedToken,\n      walletDetails,\n    });\n    return initializedUser;\n  }\n\n  /**\n   * @description\n   * Used to log the user in with an oauth login flow\n   *\n   * Note that you have to either enable \"Auth0\" or \"Custom JSON Web Token\" in the [auth setting dashboard](https://withpaper.com/dashboard/auth-settings) in order to use this\n   * @param {string} jwtParams.token The associate token from the oauth callback\n   * @param {AuthProvider} jwtParams.provider The Auth provider that is being used\n   * @param {string} jwtParams.recoveryCode This has to be passed in if the user is not logging in for the first time in order for us to decrypt and recover the users wallet\n   * @returns {{user: InitializedUser}} An InitializedUser object containing the user's status, wallet, authDetails, and more\n   */\n  async loginWithJwtAuth({\n    token,\n    authProvider,\n    recoveryCode,\n  }: AuthQuerierTypes[\"loginWithJwtAuthCallback\"]): Promise<AuthLoginReturnType> {\n    const result = await this.AuthQuerier.call<AuthAndWalletRpcReturnType>({\n      procedureName: \"loginWithJwtAuthCallback\",\n      params: {\n        token,\n        authProvider,\n        recoveryCode,\n      },\n    });\n    return this.postLogin(result);\n  }\n\n  /**\n   * @description\n   * Used to log the user into their Paper wallet on your platform via a myriad of auth providers\n   *\n   * @example\n   * const Paper = new PaperEmbeddedWalletSdk({clientId: \"YOUR_CLIENT_ID\", chain: \"Polygon\"})\n   * try {\n   *   const user = await Paper.auth.loginWithPaperModal();\n   *   // user is now logged in\n   * } catch (e) {\n   *   // User closed modal or something else went wrong during the authentication process\n   *   console.error(e)\n   * }\n   *\n   * @returns {{user: InitializedUser}} An InitializedUser object. See {@link PaperEmbeddedWalletSdk.getUser} for more\n   */\n  async loginWithPaperModal(): Promise<AuthLoginReturnType> {\n    const result = await this.AuthQuerier.call<AuthAndWalletRpcReturnType>({\n      procedureName: \"loginWithPaperModal\",\n      params: undefined,\n      showIframe: true,\n    });\n    return this.postLogin(result);\n  }\n\n  /**\n   * @description\n   * Used to log the user into their Paper wallet using email OTP\n   *\n   * @example\n   *  const Paper = new PaperEmbeddedWalletSdk({clientId: \"\", chain: \"Polygon\"});\n   *  try {\n   *    // prompts user to enter the code they received\n   *    const user = await Paper.auth.loginWithPaperEmailOtp({ email : \"you@example.com\" });\n   *    // user is now logged in\n   *  } catch (e) {\n   *    // User closed the OTP modal or something else went wrong during the authentication process\n   *    console.error(e)\n   *  }\n   * @param {string} props.email We will send the email an OTP that needs to be entered in order for them to be logged in.\n   * @returns {{user: InitializedUser}} An InitializedUser object. See {@link PaperEmbeddedWalletSdk.getUser} for more\n   */\n  async loginWithPaperEmailOtp({\n    email,\n  }: {\n    email: string;\n  }): Promise<AuthLoginReturnType> {\n    const result = await this.AuthQuerier.call<AuthAndWalletRpcReturnType>({\n      procedureName: \"loginWithPaperModal\",\n      params: { email },\n      showIframe: true,\n    });\n    return this.postLogin(result);\n  }\n\n  /**\n   * @description\n   * A headless way to send the users at {email} an OTP code.\n   * You need to then call {@link Auth.verifyPaperEmailLoginOtp} in order to complete the login process\n   *\n   * @example\n   *  const Paper = new PaperEmbeddedWalletSdk({clientId: \"\", chain: \"Polygon\"});\n   *  // sends user an OTP code\n   * try {\n   *    const { isNewUser } = await Paper.auth.sendPaperEmailLoginOtp({ email : \"you@example.com\" });\n   * } catch(e) {\n   *    // Error Sending user's email an OTP code\n   *    console.error(e);\n   * }\n   *\n   * // Then when your user is ready to verify their OTP\n   * try {\n   *    const user = await Paper.auth.verifyPaperEmailLoginOtp({ email: \"you@example.com\", otp: \"6-DIGIT_CODE_HERE\", recoveryCode: \"Required if user is an existing user. i.e. !isNewUser\"});\n   * } catch(e) {\n   *    // Error verifying the OTP code\n   *    console.error(e)\n   * }\n   *\n   * @param {string} props.email We will send the email an OTP that needs to be entered in order for them to be logged in.\n   * @returns {{ success: boolean, isNewUser: boolean }} Success: indicating if the email was successfully sent (Note the email could still end up in the user's spam folder). IsNewUser indicates if the user is a new user to your platform\n   */\n  async sendPaperEmailLoginOtp({\n    email,\n  }: AuthQuerierTypes[\"sendPaperEmailLoginOtp\"]): Promise<SendEmailOtpReturnType> {\n    const { isNewUser, isNewDevice } =\n      await this.AuthQuerier.call<SendEmailOtpReturnType>({\n        procedureName: \"sendPaperEmailLoginOtp\",\n        params: { email },\n      });\n    return { isNewUser, isNewDevice };\n  }\n\n  /**\n   *  @description\n   * Used to verify the otp that the user receives from  Paper\n   *\n   * See {@link Auth.sendPaperEmailLoginOtp} for how the headless call flow looks like\n   *\n   * @param {string} props.email We will send the email an OTP that needs to be entered in order for them to be logged in.\n   * @param {string} props.otp The code that the user received in their email\n   * @param {string} props.recoveryCode The code that is first sent to the user when they sign up. Required if user is an existing user. i.e. !isNewUser from return params of {@link Auth.sendPaperEmailLoginOtp}\n   * @returns {{user: InitializedUser}} An InitializedUser object containing the user's status, wallet, authDetails, and more\n   */\n  async verifyPaperEmailLoginOtp({\n    email,\n    otp,\n    recoveryCode,\n  }: AuthQuerierTypes[\"verifyPaperEmailLoginOtp\"]) {\n    const result = await this.AuthQuerier.call<AuthAndWalletRpcReturnType>({\n      procedureName: \"verifyPaperEmailLoginOtp\",\n      params: { email, otp, recoveryCode },\n    });\n    return this.postLogin(result);\n  }\n\n  /**\n   * @description\n   * Logs any existing user out of their wallet.\n   * @returns {{success: boolean}} true if a user is successfully logged out. false if there's no user currently logged in.\n   */\n  async logout(): Promise<LogoutReturnType> {\n    const { success } = await this.AuthQuerier.call<LogoutReturnType>({\n      procedureName: \"logout\",\n      params: undefined,\n    });\n    const isRemoveAuthCookie = await this.localStorage.removeAuthCookie();\n    const isRemoveUserId = await this.localStorage.removeWalletUserId();\n\n    return {\n      success: success || isRemoveAuthCookie || isRemoveUserId,\n    };\n  }\n}\n","import type { Chain } from \"@paperxyz/sdk-common-utilities\";\nimport type { ClientIdWithQuerierAndChainType } from \"../../interfaces/EmbeddedWallets/EmbeddedWallets\";\nimport type {\n  CallContractReturnType,\n  ContractCallInputType,\n} from \"../../interfaces/EmbeddedWallets/GaslessTransactionMaker\";\nimport type { EmbeddedWalletIframeCommunicator } from \"../../utils/iFrameCommunication/EmbeddedWalletIframeCommunicator\";\n\nexport type GaslessTransactionQuerierTypes = {\n  callContract: {\n    contractAddress: string;\n    method: {\n      stub: string;\n      args: Array<unknown>;\n    };\n    chain: Chain;\n  };\n};\n\n/**\n * @description GaslessTransactionMaker is used to execute gasless transactions from the embedded wallets\n */\nexport class GaslessTransactionMaker {\n  protected chain: Chain;\n  protected clientId: string;\n  protected gaslessTransactionQuerier: EmbeddedWalletIframeCommunicator<GaslessTransactionQuerierTypes>;\n  constructor({ chain, clientId, querier }: ClientIdWithQuerierAndChainType) {\n    this.chain = chain;\n    this.clientId = clientId;\n    this.gaslessTransactionQuerier = querier;\n  }\n  /**\n   * @description\n   * Use to call arbitrary contracts on the blockchain. Note that you have to enable {@link https://withpaper.com/dashboard/developers Sponsored Fees} in order for this to work.\n   *\n   * @param {string} params.contractAddress The address for which the contract call is directed too.\n   * @param {string} params.methodInterface the function stub on the contract. This looks something like `function myFunctionName(address user, uint256 tokenId) external payable`. Refer to this {@link https://blog.ricmoo.com/human-readable-contract-abis-in-ethers-js-141902f4d917 ethers.js article} for more.\n   * @param {Array} params.methodArgs The arguments that is to be passed to the contract in order that they are to be passed to the contract.\n   * @throws if there is an error calling the contract for whatever reason.\n   * @returns {{ transactionHash: string }} The transaction hash associated with the successful contract call.\n   */\n  async callContract({\n    contractAddress,\n    methodArgs,\n    methodInterface,\n  }: ContractCallInputType): Promise<CallContractReturnType> {\n    return await this.gaslessTransactionQuerier.call<CallContractReturnType>({\n      procedureName: \"callContract\",\n      params: {\n        chain: this.chain,\n        contractAddress,\n        method: {\n          args: methodArgs,\n          stub: methodInterface,\n        },\n      },\n    });\n  }\n}\n","import type {\n  Provider,\n  TransactionRequest,\n} from \"@ethersproject/abstract-provider\";\nimport type {\n  TypedDataDomain,\n  TypedDataField,\n} from \"@ethersproject/abstract-signer\";\nimport { Signer } from \"@ethersproject/abstract-signer\";\nimport type { Bytes } from \"@ethersproject/bytes\";\nimport type { Deferrable } from \"@ethersproject/properties\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\nimport type { ClientIdWithQuerierType } from \"../../interfaces/EmbeddedWallets/EmbeddedWallets\";\nimport type {\n  GetAddressReturnType,\n  SignedTypedDataReturnType,\n  SignMessageReturnType,\n  SignTransactionReturnType,\n} from \"../../interfaces/EmbeddedWallets/Signer\";\n\nimport type { EmbeddedWalletIframeCommunicator } from \"../../utils/iFrameCommunication/EmbeddedWalletIframeCommunicator\";\n\nexport type SignerProcedureTypes = {\n  getAddress: void;\n  signMessage: { message: string | Bytes; chainId: number | undefined };\n  signTransaction: {\n    transaction: Deferrable<TransactionRequest>;\n    chainId: number | undefined;\n  };\n  signTypedDataV4: {\n    domain: TypedDataDomain;\n    types: Record<string, Array<TypedDataField>>;\n    message: Record<string, unknown>;\n    chainId: number | undefined;\n  };\n  connect: { provider: Provider };\n};\n\nexport class EthersSigner extends Signer {\n  protected querier: EmbeddedWalletIframeCommunicator<SignerProcedureTypes>;\n  protected clientId: string;\n  private DEFAULT_ETHEREUM_CHAIN_ID = 1;\n  constructor({\n    provider,\n    clientId,\n    querier,\n  }: ClientIdWithQuerierType & {\n    provider: Provider;\n  }) {\n    super();\n    this.clientId = clientId;\n    this.querier = querier;\n    defineReadOnly(this, \"provider\", provider);\n  }\n\n  override async getAddress(): Promise<string> {\n    const { address } = await this.querier.call<GetAddressReturnType>({\n      procedureName: \"getAddress\",\n      params: undefined,\n    });\n    return address;\n  }\n\n  override async signMessage(message: string | Bytes): Promise<string> {\n    const { signedMessage } = await this.querier.call<SignMessageReturnType>({\n      procedureName: \"signMessage\",\n      params: {\n        message,\n        chainId:\n          (await this.provider?.getNetwork())?.chainId ??\n          this.DEFAULT_ETHEREUM_CHAIN_ID,\n      },\n    });\n    return signedMessage;\n  }\n\n  override async signTransaction(\n    transaction: TransactionRequest,\n  ): Promise<string> {\n    const { signedTransaction } =\n      await this.querier.call<SignTransactionReturnType>({\n        procedureName: \"signTransaction\",\n        params: {\n          transaction,\n          chainId:\n            (await this.provider?.getNetwork())?.chainId ??\n            this.DEFAULT_ETHEREUM_CHAIN_ID,\n        },\n      });\n    return signedTransaction;\n  }\n\n  async _signTypedData(\n    domain: SignerProcedureTypes[\"signTypedDataV4\"][\"domain\"],\n    types: SignerProcedureTypes[\"signTypedDataV4\"][\"types\"],\n    message: SignerProcedureTypes[\"signTypedDataV4\"][\"message\"],\n  ): Promise<string> {\n    const { signedTypedData } =\n      await this.querier.call<SignedTypedDataReturnType>({\n        procedureName: \"signTypedDataV4\",\n        params: {\n          domain,\n          types,\n          message,\n          chainId:\n            (await this.provider?.getNetwork())?.chainId ??\n            this.DEFAULT_ETHEREUM_CHAIN_ID,\n        },\n      });\n    return signedTypedData;\n  }\n\n  override connect(provider: Provider): EthersSigner {\n    return new EthersSigner({\n      clientId: this.clientId,\n      provider,\n      querier: this.querier,\n    });\n  }\n}\n","import type { Networkish } from \"@ethersproject/providers\";\nimport { getDefaultProvider } from \"@ethersproject/providers\";\nimport type { Chain } from \"@paperxyz/sdk-common-utilities\";\nimport { ChainToPublicRpc } from \"@paperxyz/sdk-common-utilities\";\nimport type {\n  ClientIdWithQuerierAndChainType,\n  GetUserWalletStatusFnReturnType,\n  GetUserWalletStatusRpcReturnType,\n  SetUpWalletRpcReturnType,\n  WalletAddressObjectType,\n} from \"../../interfaces/EmbeddedWallets/EmbeddedWallets\";\nimport { UserWalletStatus } from \"../../interfaces/EmbeddedWallets/EmbeddedWallets\";\n\nimport type { EmbeddedWalletIframeCommunicator } from \"../../utils/iFrameCommunication/EmbeddedWalletIframeCommunicator\";\nimport { LocalStorage } from \"../../utils/Storage/LocalStorage\";\nimport { GaslessTransactionMaker } from \"./GaslessTransactionMaker\";\nimport { EthersSigner } from \"./Signer\";\n\nexport type WalletManagementTypes = {\n  createWallet: void;\n  setUpNewDevice: void;\n  getUserStatus: void;\n};\nexport type WalletManagementUiTypes = {\n  createWalletUi: void;\n  setUpNewDeviceUi: void;\n};\n\nexport type EmbeddedWalletInternalHelperType = { showUi: boolean };\n\nexport class EmbeddedWallet {\n  protected clientId: string;\n  protected chain: Chain;\n  protected walletManagerQuerier: EmbeddedWalletIframeCommunicator<\n    WalletManagementTypes & WalletManagementUiTypes\n  >;\n  protected localStorage: LocalStorage;\n\n  public gasless: GaslessTransactionMaker;\n\n  /**\n   * Not meant to be initialized directly. Call {@link .initializeUser} to get an instance\n   * @param param0\n   */\n  constructor({ clientId, chain, querier }: ClientIdWithQuerierAndChainType) {\n    this.clientId = clientId;\n    this.chain = chain;\n    this.walletManagerQuerier = querier;\n\n    this.gasless = new GaslessTransactionMaker({\n      chain,\n      clientId,\n      querier,\n    });\n\n    this.localStorage = new LocalStorage({ clientId });\n  }\n\n  /**\n   * @internal\n   * Used to set-up the user device in the case that they are using incognito\n   * @param {string} param.deviceShareStored the value that is saved for the user's device share.\n   * We save this into the localStorage on the site itself if we could not save it within the iframe's localStorage.\n   * This happens in incognito mostly\n   * @param {string} param.walletAddress User's wallet address\n   * @param {boolean} param.isIframeStorageEnabled Tells us if we were able to store values in the localStorage in our iframe.\n   * We need to store it under the dev's domain localStorage if we weren't able to store things in the iframe\n   * @returns {{ walletAddress : string }} The user's wallet details\n   */\n  async postWalletSetUp({\n    deviceShareStored,\n    walletAddress,\n    isIframeStorageEnabled,\n    walletUserId,\n  }: SetUpWalletRpcReturnType & {\n    walletUserId: string;\n  }): Promise<WalletAddressObjectType> {\n    if (!isIframeStorageEnabled) {\n      await this.localStorage.saveDeviceShare(deviceShareStored, walletUserId);\n    }\n    return { walletAddress };\n  }\n\n  /**\n   * @internal\n   * Gets the various status states of the user\n   * @example\n   *  const userStatus = await Paper.getUserWalletStatus();\n   *  switch (userStatus.status) {\n   *  case UserWalletStatus.LOGGED_OUT: {\n   *    // User is logged out, call one of the auth methods on Paper.auth to authenticate the user\n   *    break;\n   *  }\n   *  case UserWalletStatus.LOGGED_IN_WALLET_UNINITIALIZED: {\n   *    // User is logged in, but does not have a wallet associated with it\n   *    // you also have access to the user's details\n   *    userStatus.user.authDetails;\n   *    break;\n   *  }\n   *  case UserWalletStatus.LOGGED_IN_NEW_DEVICE: {\n   *    // User is logged in and created a wallet already, but is missing the device shard\n   *    // You have access to:\n   *    userStatus.user.authDetails;\n   *    userStatus.user.walletAddress;\n   *    break;\n   *  }\n   *  case UserWalletStatus.LOGGED_IN_WALLET_INITIALIZED: {\n   *    // user is logged in and wallet is all set up.\n   *    // You have access to:\n   *    userStatus.user.authDetails;\n   *    userStatus.user.walletAddress;\n   *    userStatus.user.wallet;\n   *    break;\n   *  }\n   *}\n   * @returns {GetUserWalletStatusFnReturnType} an object to containing various information on the user statuses\n   */\n  async getUserWalletStatus(): Promise<GetUserWalletStatusFnReturnType> {\n    const userStatus =\n      await this.walletManagerQuerier.call<GetUserWalletStatusRpcReturnType>({\n        procedureName: \"getUserStatus\",\n        params: undefined,\n      });\n    if (userStatus.status === UserWalletStatus.LOGGED_IN_WALLET_INITIALIZED) {\n      return {\n        status: UserWalletStatus.LOGGED_IN_WALLET_INITIALIZED,\n        user: { ...userStatus.user, wallet: this },\n      };\n    }\n    return userStatus;\n  }\n\n  /**\n   * @description\n   * Switches the chain that the user wallet is currently on.\n   * @example\n   * // user wallet will be set to Polygon\n   * const Paper = new PaperEmbeddedWalletSdk({clientId: \"\", chain: \"Polygon\"});\n   * const user = await Paper.initializeUser();\n   * // Switch the user wallet to Mumbai\n   * await user.wallet.setChain({ chain: \"Mumbai\" });\n   * @param {Chain} params.chain The chain that we are changing the user wallet too\n   */\n  async setChain({ chain }: { chain: Chain }): Promise<void> {\n    this.chain = chain;\n    this.gasless = new GaslessTransactionMaker({\n      chain,\n      clientId: this.clientId,\n      querier: this.walletManagerQuerier,\n    });\n  }\n\n  /**\n   * Returns an Ethers.Js compatible signer that you can use in conjunction with the rest of dApp\n   * @example\n   * const Paper = new PaperEmbeddedWalletSdk({clientId: \"\", chain: \"Polygon\"});\n   * const user = await Paper.getUser();\n   * if (user.status === UserStatus.LOGGED_IN_WALLET_INITIALIZED) {\n   *    // returns a signer on the Polygon mainnet\n   *    const signer = await user.getEthersJsSigner();\n   *    // returns a signer on the specified RPC endpoints\n   *    const signer = await user.getEthersJsSigner({rpcEndpoint: \"https://eth-rpc.gateway.pokt.network\"});\n   * }\n   * @param {Networkish} network.rpcEndpoint the rpc url where calls will be routed through\n   * @throws If attempting to call the function without the user wallet initialize on their current device. This should never happen if call {@link PaperEmbeddedWalletSdk.initializeUser} before accessing this function\n   * @returns A signer that is compatible with Ether.js. Defaults to the public rpc on the chain specified when initializing the {@link PaperEmbeddedWalletSdk} instance\n   */\n  async getEthersJsSigner(network?: {\n    rpcEndpoint: Networkish;\n  }): Promise<EthersSigner> {\n    const signer = new EthersSigner({\n      clientId: this.clientId,\n      provider: getDefaultProvider(\n        network?.rpcEndpoint ?? ChainToPublicRpc[this.chain],\n      ),\n      querier: this.walletManagerQuerier,\n    });\n    return signer;\n  }\n}\n","import type {\n  GetUser,\n  PaperConstructorType,\n} from \"../interfaces/EmbeddedWallets/EmbeddedWallets\";\nimport {\n  UserStatus,\n  UserWalletStatus,\n} from \"../interfaces/EmbeddedWallets/EmbeddedWallets\";\nimport { EmbeddedWalletIframeCommunicator } from \"../utils/iFrameCommunication/EmbeddedWalletIframeCommunicator\";\nimport type { AuthQuerierTypes } from \"./Auth\";\nimport { Auth } from \"./Auth\";\nimport { EmbeddedWallet } from \"./EmbeddedWallets/EmbeddedWallet\";\n\nexport class PaperEmbeddedWalletSdk {\n  protected clientId: string;\n  protected querier: EmbeddedWalletIframeCommunicator<AuthQuerierTypes>;\n\n  private wallet: EmbeddedWallet;\n  /**\n   * Used to manage the Auth state of the user.\n   */\n  auth: Auth;\n\n  /**\n   * @example\n   * const Paper = new PaperEmbeddedWalletSdk({ clientId: \"\", chain: \"Goerli\" });\n   * @param {string} initParams.clientId the clientId found on the {@link https://withpaper.com/dashboard/developers developer's dashboard}\n   * @param {Chain} initParams.chain sets the default chain that the EmbeddedWallet will live on.\n   * @param {CustomizationOptionsType} initParams.styles sets the default style override for any modal that pops up asking for user's details when creating wallet or logging in.\n   */\n  constructor({ clientId, chain, styles }: PaperConstructorType) {\n    this.clientId = clientId;\n    this.querier = new EmbeddedWalletIframeCommunicator({\n      clientId,\n      customizationOptions: styles,\n    });\n    this.wallet = new EmbeddedWallet({\n      clientId,\n      chain,\n      querier: this.querier,\n    });\n\n    this.auth = new Auth({\n      clientId,\n      querier: this.querier,\n      onAuthSuccess: async (authResult) => {\n        await this.wallet.postWalletSetUp({\n          ...authResult.walletDetails,\n          walletUserId: authResult.storedToken.authDetails.userWalletId,\n        });\n        return {\n          user: {\n            status: UserStatus.LOGGED_IN_WALLET_INITIALIZED,\n            authDetails: authResult.storedToken.authDetails,\n            wallet: this.wallet,\n            walletAddress: authResult.walletDetails.walletAddress,\n          },\n        };\n      },\n    });\n  }\n\n  /**\n   * Gets the usr if they are logged in\n   * @example\n   *  const user = await Paper.getUser();\n   *  switch (user.status) {\n   *     case UserStatus.LOGGED_OUT: {\n   *       // User is logged out, call one of the auth methods on Paper.auth to authenticate the user\n   *       break;\n   *     }\n   *     case UserStatus.LOGGED_IN_WALLET_INITIALIZED: {\n   *       // user is logged in and wallet is all set up.\n   *       // You have access to:\n   *       user.status;\n   *       user.authDetails;\n   *       user.walletAddress;\n   *       user.wallet;\n   *       break;\n   *     }\n   *}\n   * @returns {GetUser} an object to containing various information on the user statuses\n   */\n  async getUser(): Promise<GetUser> {\n    const userStatus = await this.wallet.getUserWalletStatus();\n    switch (userStatus.status) {\n      // user gets {UserWalletStatus.LOGGED_IN_NEW_DEVICE} when they log in but never complete the recovery flow and exits (close modal, refresh etc)\n      case UserWalletStatus.LOGGED_IN_NEW_DEVICE:\n      // User gets {UserWalletStatus.LOGGED_IN_WALLET_UNINITIALIZED} when they log in but manage to exit the client in the small window between auth completion and sending them their wallet recovery details\n      case UserWalletStatus.LOGGED_IN_WALLET_UNINITIALIZED:\n        // in both case, we simply log them out to reset their state\n        await this.auth.logout();\n        return this.getUser();\n      case UserWalletStatus.LOGGED_OUT:\n        return {\n          status: UserStatus.LOGGED_OUT,\n        };\n      case UserWalletStatus.LOGGED_IN_WALLET_INITIALIZED:\n        return {\n          status: UserStatus.LOGGED_IN_WALLET_INITIALIZED,\n          ...userStatus.user,\n        };\n    }\n  }\n}\n"],"names":["normalizeChainId","chainId","Number","parseInt","trim","substring","PaperChainMap","_paper","WeakMap","_signer","PaperWalletConnector","_TWConnector","_inherits","_super","_createSuper","options","_this","_classCallCheck","call","_defineProperty","_assertThisInitialized","_classPrivateFieldInitSpec","writable","value","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","accounts","wrap","_context","prev","next","length","onDisconnect","emit","account","utils","stop","_x","apply","arguments","id","unsupported","isChainUnsupported","chain","_callee2","_context2","_createClass","key","_this2","_classPrivateFieldGet","this","_classPrivateFieldSet","Promise","_ref3","_callee3","resolve","reject","_yield$import","PaperEmbeddedWalletSdk","chainName","_context3","Error","sent","clientId","t0","_x2","_x3","_connect","_callee4","paperSDK","user","authResult","_context4","getPaperSDK","getUser","status","UserStatus","auth","loginWithPaperModal","abrupt","setupListeners","getAddress","_disconnect","_callee5","_context5","_getAddress","_callee6","signer","_context6","getSigner","_isConnected","_callee7","addr","_context7","_getProvider","_callee8","_context8","provider","_getSigner","_callee9","_this$user","_context9","wallet","getEthersJsSigner","rpcEndpoint","rpc","_isAuthorized","_callee10","_context10","_switchChain","_callee11","_this$user2","_this$user3","_context11","chains","find","c","setChain","t1","t2","t3","_x4","_setupListeners","_callee12","_context12","getProvider","on","onAccountsChanged","onChainChanged","_getEmail","_callee13","_context13","authDetails","email","TWConnector","s","t","Ethereum","Goerli","Mumbai","Polygon","Avalanche","i","o","window","localStorage","getItem","location","origin","includes","g","T","a","concat","E","A","e","X","H","PAPER_EMAIL_OTP","GOOGLE","AUTH0","CUSTOM_JWT","b","LOGGED_OUT","LOGGED_IN_WALLET_INITIALIZED","C","LOGGED_IN_WALLET_UNINITIALIZED","LOGGED_IN_NEW_DEVICE","N","Map","isSupported","get","setItem","set","removeItem","saveWalletUserId","getWalletUserId","L","setTimeout","z","height","width","border","backgroundColor","position","top","right","zIndex","display","w","f","_ref2","link","iframeId","_ref2$container","container","r","document","body","iframeStyles","onIframeInitialize","POLLING_INTERVAL_SECONDS","POST_LOAD_BUFFER_SECONDS","n","getElementById","p","URL","l","searchParams","src","href","createElement","d","u","Object","assign","style","setAttribute","appendChild","onload","onIframeLoadHandler","iframe","_callee15","_context15","_callee14","_context14","MessageChannel","port1","onmessage","S","m","data","close","success","error","contentWindow","onIframeLoadedInitVariables","t4","eventType","t5","v","t6","port2","postMessage","_this3","procedureName","params","_ref3$showIframe","showIframe","_callee17","_context17","_callee16","_context16","delete","W","_f","_ref4","_this4","customizationOptions","j","q","path","queryParams","_callee18","_context18","getAuthCookie","getDeviceShare","authCookie","deviceShareStored","walletUserId","_ref5","V","_i","_Object$keys","keys","toString","_","_ref6","querier","onAuthSuccess","AuthQuerier","_ref7","_this5","storedToken","walletDetails","_callee19","_context19","shouldStoreCookieString","saveAuthCookie","cookieString","_ref8","_this6","token","authProvider","recoveryCode","_callee20","_context20","postLogin","_callee21","_context21","_ref9","_this7","_callee22","_context22","_ref10","_this8","_callee23","_yield$_this8$AuthQue","_context23","isNewUser","isNewDevice","_ref11","_this9","otp","_callee24","_context24","_callee25","_yield$this$AuthQueri","_context25","removeAuthCookie","removeWalletUserId","y","_ref12","gaslessTransactionQuerier","_ref13","_this10","contractAddress","methodArgs","methodInterface","_callee26","_context26","method","args","stub","h","_Z","_super2","_ref14","_this11","DEFAULT_ETHEREUM_CHAIN_ID","$","_callee27","_yield$this$querier$c","_context27","address","_callee28","_yield$this$querier$c2","_context28","getNetwork","t7","message","t8","signedMessage","_callee29","_yield$this$querier$c3","_context29","transaction","signedTransaction","_callee30","_yield$this$querier$c4","_context30","t9","domain","types","t10","signedTypedData","Z","D","_ref15","walletManagerQuerier","gasless","_ref16","_this12","walletAddress","isIframeStorageEnabled","_callee31","_context31","saveDeviceShare","_callee32","_context32","I","_ref17","_this13","_callee33","_context33","_callee34","_context34","B","J","P","_ref18","_this14","styles","_callee35","_context35","postWalletSetUp","userWalletId","_callee36","_context36","getUserWalletStatus","logout"],"sourceRoot":""}